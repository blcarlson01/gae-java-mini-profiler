{"name":"Gae-java-mini-profiler","tagline":"A mini-profiler for the Google App Engine Java runtime","body":"Google App Engine Mini Profiler for Java\r\n====================================\r\n\r\n - [Features](#features)\r\n - [Demo](#demo)\r\n - [Getting Started](#getting-started)\r\n   - [Dependencies](#dependencies)\r\n   - [Installation](#installation)\r\n   - [Configuration](#configuration)\r\n - [Instrumenting your code](#instrumenting-code)\r\n\r\nAbout\r\n-----\r\n\r\nThis is a \"mini profiler\" for the Google App Engine Java runtime.\r\n\r\nIt's heavily inspired by\r\n\r\n - [mvc-mini-profiler][] - .NET Mini Profiler that started it all.\r\n - [gae\\_mini\\_profiler][gaeminiprofiler] - Python Mini Profiler for the Google App Engine Python runtime.\r\n\r\n[mvc-mini-profiler]: http://code.google.com/p/mvc-mini-profiler\r\n[gaeminiprofiler]: https://github.com/kamens/gae_mini_profiler\r\n\r\nIt's released under the [MIT](http://en.wikipedia.org/wiki/MIT_License) license.\r\n\r\n<a name=\"features\"></a>\r\nFeatures\r\n--------\r\n\r\n - Live profiling of any request _in production_:\r\n \r\n   - Provides a basic Java profiler used to explicitly profile sections of your code.   \r\n   - Captures [Appstats][] data if the `AppstatsFilter` is running.\r\n   \r\n - Capture of profiles for requests that redirected to the current request as well as any `XMLHttpRequests` that happen after the page loads _as they happen_.\r\n   \r\n - Granular control over when profiling happens and who can see the results:\r\n \r\n   - Limit to a subset of URLs,\r\n   - Limit to app administrators,\r\n   - Limit to certain app users (by email),\r\n   - Any combination of the above.\r\n   \r\n - Simple configuration:\r\n   \r\n   - A single `.jar` file (and a dependency on the [Jackson][] JSON library).\r\n   - A new `<servlet>` and `<filter>` in your `web.xml` file.\r\n   - An include in the `<head>` of your page template.\r\n   \r\n[Appstats]: http://code.google.com/appengine/docs/java/tools/appstats.html\r\n[Jackson]: http://jackson.codehaus.org/\r\n\r\n<a name=\"demo\"></a>\r\nDemo\r\n----\r\n\r\nA demo app (with profiling enabled for anyone) is at [http://gae-java-mini-profiler.appspot.com/](http://gae-java-mini-profiler.appspot.com/).\r\n\r\n<img src=\"http://gae-java-mini-profiler.appspot.com/images/screenshot-1.png\" alt=\"Example Screenshot\" style=\"max-width: 480px;\">\r\n\r\n<a name=\"getting-started\"></a>\r\nGetting Started\r\n---------------\r\n\r\n<a name=\"dependencies\"></a>\r\n### Dependencies\r\n\r\n - `appengine-api-1.0-sdk` (you should already have this in your project)\r\n - `appengine-api-labs` (you should already have this in your project)\r\n - `servlet-api` (you should already have this in your project)\r\n - `jackson-core-asl`\r\n - `jackson-mapper-asl`\r\n\r\n<a name=\"installation\"></a>\r\n### Installation\r\n\r\nClone the source from here and build it using [maven](http://maven.apache.org/).\r\n\r\nThen copy the `gae-mini-profiler-1.0.0.jar` file (and the two Jackson jars) to your `WEB-INF/lib` folder.\r\n\r\n<a name=\"configuration\"></a>\r\n### Configuration\r\n\r\nAdd the `ca.jimr.gae.profiler.MiniProfilerServlet` and `ca.jimr.gae.profiler.MiniProfilerFilter` to your `web.xml`.\r\n\r\n    <servlet>\r\n      <servlet-name>miniprofiler</servlet-name>\r\n      <servlet-class>ca.jimr.gae.profiler.MiniProfilerServlet</servlet-class>\r\n    </servlet>\r\n    <servlet-mapping>\r\n      <servlet-name>miniprofiler</servlet-name>\r\n      <url-pattern>/gae_mini_profile/*</url-pattern>\r\n    </servlet-mapping>\r\n    <filter>\r\n      <filter-name>miniprofiler-filter</filter-name>\r\n      <filter-class>ca.jimr.gae.profiler.MiniProfilerFilter</filter-class>\r\n    </filter>\r\n    <filter-mapping>\r\n      <filter-name>miniprofiler-filter</filter-name>\r\n      <url-pattern>/*</url-pattern>\r\n    </filter-mapping>\r\n    \r\nNote: The `MiniProfilerFilter` __MUST__ be before the `AppstatsFilter` if you want to have Appstats show up.\r\n\r\nThere are a bunch of `initParameter` params you can set to configure the profiler:\r\n\r\n__Servlet Parameters__\r\n\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\" width=\"100%\">\r\n <thead>\r\n  <tr><th width=\"25%\">Parameter</th><th width=\"75%\">Description</th></tr>\r\n </thead>\r\n <tbody>\r\n  <tr><td><code>maxStackFrames</code></td><td>The maximum number of stack frames to show in the Appstats stack traces.  The default is to show all of them.</td></tr>\r\n  <tr><td><code>htmlIdPrefix</code></td><td>Prefix to use for HTML ids generated by the profiler.  This <strong>MUST</strong> match the <code>htmlIdPrefix</code> in the filter definition. The default is <code>&quot;mp&quot;</code>.</td></tr>\r\n  <tr><td><code>resourceCacheHours</code></td><td>Number of hours to cache the static resources generated by the profiler in the browser.  The default is not to cache at all (0 hours).</td></tr>  \r\n </tbody>\r\n</table>\r\n\r\n_Filter Parameters_\r\n\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\" width=\"100%\">\r\n <thead>\r\n  <tr><th width=\"25%\">Parameter</th><th width=\"75%\">Description</th>\r\n </thead>\r\n <tbody>\r\n  <tr><td><code>servletURL</code></td><td>The base URL that the servlet is mapped to.  This <strong>MUST</strong> match the URL in the <code>&lt;servlet-mapping&gt;</code> specified for the <code>MiniProfilerServlet</code>.  The default is <code>/gae_mini_profile/</code>.</td></tr>\r\n  <tr><td><code>restrictToAdmins</code></td><td>Whether to restrict profiling to app admins.  The default is false.</td></tr>\r\n  <tr><td><code>restrictToEmails</code></td><td>Comma-delimited list of emails of app users to restrict profiling to.  The default is no restriction.</td></tr>\r\n  <tr><td><code>restrictToURLs</code></td><td>Comma-delimited list of regular expressions of URL patterns that profiling should be done on.  This can be used to further limit the scope of the filter mapping specified in the <code>web.xml</code>. The default is no restriction.</td></tr>\r\n  <tr><td><code>dataExpiry</code></td><td>How many seconds to keep profile data around in Memcache.  The default is 30 seconds.</td></tr>\r\n  <tr><td><code>htmlIdPrefix</code></td><td>Prefix to use for HTML ids generated by the profiler.  This <strong>MUST</strong> match the <code>htmlIdPrefix</code> in the servlet definition. The default is <code>&quot;mp&quot;</code>.</td></tr>\r\n </tbody>\r\n</table>\r\n\r\nAt the bottom of the `<head>` in your page (usually in whatever global template you are using), you must output\r\nthe contents of the `mini_profile_includes` request attribute.  This attribute will be `null` if the profiler\r\ndid not run for this request.  E.g.\r\n\r\n    <head>\r\n      <!-- Other Stuff would go here -->\r\n      ${mini_profile_includes}\r\n    </head> \r\n    \r\nIf you are already including jQuery and/or jQuery Templates on your page, this include needs to happen _after_ them.  If jQuery or jQuery Templates are not already included on the page, they will be.\r\n    \r\n### Start up your app!\r\n    \r\nAnd that's it.  When you run your application, depending on what restrictions you have set, you will see profiling stats showing\r\nup in the left-hand corner of the page.\r\n\r\n<a name=\"instrumenting-code\"></a>\r\nInstrumenting your code\r\n-----------------------\r\n\r\nOdds are you will want more than just the elapsed time for the entire request.\r\n\r\nYou can use the `MiniProfiler` class to record execution times for sections of your code.\r\n\r\nThe main method to call is `MiniProfiler.step( String stepName )`.  This will start a new profiling step, and return an object that\r\nyou can later call the `close()` method on to finish the step. These steps can be nested to create a tree-structure.\r\n\r\nIf the profiler is inactive, the steps won't do anything.\r\n\r\n    Step step1 = MiniProfiler.step(\"Big things happening\");\r\n    try\r\n    {\r\n      Step step2 = MiniProfiler.step(\"Sub-Step 1\");\r\n      try\r\n      {\r\n        // Do some work\r\n      }\r\n      finally\r\n      {\r\n        step2.close();\r\n      }\r\n      Step step3 = MiniProfiler.step(\"Sub-Step 2\");\r\n      try\r\n      {\r\n        // Do some work\r\n      }\r\n      finally\r\n      {\r\n        step3.close();\r\n      }\r\n    }\r\n    finally\r\n    {\r\n      step.close();\r\n    }\r\n\r\nThis will show up in the profiler UI as something like (different numbers obviously):\r\n\r\n    Name                        Duration (ms)   Self (ms)   Offset (ms)\r\n    -------------------------------------------------------------------\r\n    Request                     100.00          10.00       0 \r\n      Big things happening      90.00           15.00       10.00\r\n        Sub-Step 1              35.00           35.00       15.00\r\n        Sub-Step 2              40.00           40.00       50.00        ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}